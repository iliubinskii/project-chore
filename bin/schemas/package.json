{
  "properties": {
    "scripts": {
      "properties": {
        "add-tags": {
          "enum": [
            "php bin/add-tags.php",
            "php node_modules/real-config/bin/add-tags.php"
          ]
        },
        "browserslist": {
          "const": "browserslist"
        },
        "build": {
          "enum": [
            "next build",
            "quasar build",
            "react-scripts build",
            "vsce package"
          ]
        },
        "build-changelog": {
          "const": "auto-changelog"
        },
        "build-commonjs": {
          "const": "cf dist && tsc --project tsconfig-build.json"
        },
        "build-doc": {
          "enum": [
            "cf docs && node build-doc.js && cpy assets/docs/static/* docs",
            "typedoc src && cpy assets/docs/static/* docs"
          ]
        },
        "build-es": {
          "const": "cf es && tsc --project tsconfig-build-es.json"
        },
        "clear-cache": {
          "const": "cf .cache node_modules/.cache"
        },
        "commitlint": {
          "const": "commitlint --from="
        },
        "commitlint-next": {
          "const": "commitlint --config=commitlint-next.config.js --edit"
        },
        "composer:bump": {
          "const": "composer bump"
        },
        "composer:dump-autoload": {
          "const": "composer dump-autoload"
        },
        "composer:outdated": {
          "const": "composer outdated"
        },
        "composer:reinstall": {
          "const": "composer reinstall *"
        },
        "composer:update": {
          "const": "composer update"
        },
        "config-lint": {
          "enum": [
            "node bin/config-lint.js",
            "node node_modules/real-config/bin/config-lint.js"
          ]
        },
        "delete-tags": {
          "enum": [
            "php bin/delete-tags.php",
            "php node_modules/real-config/bin/delete-tags.php"
          ]
        },
        "dev": {
          "enum": [
            "start http://localhost:3000 && next dev",
            "quasar dev",
            "react-scripts start",
            "ts-node src/index.ts",
            "tsc && ts-node --transpileOnly src/index.ts"
          ]
        },
        "full-check": {
          "enum": [
            "php bin/full-check.php",
            "php node_modules/real-config/bin/full-check.php"
          ]
        },
        "git:unix": {
          "const": "git config --replace-all core.ignorecase false"
        },
        "git:unset-hooks": {
          "const": "git config --unset core.hooksPath"
        },
        "git:windows": {
          "const": "git config --replace-all core.ignorecase true"
        },
        "husky:commit-msg": {
          "const": "npm run commitlint-next"
        },
        "husky:pre-commit": {
          "enum": [
            "php bin/pre-commit.php",
            "php node_modules/real-config/bin/pre-commit.php"
          ]
        },
        "inspect": {
          "const": "quasar inspect | strip-ansi 1>webpack.info"
        },
        "install-dev": {
          "const": "npm install --no-audit --strict-peer-deps"
        },
        "install-dev-clean": {
          "const": "npm install-clean --no-audit --strict-peer-deps"
        },
        "install-prod": {
          "const": "npm install --ignore-scripts --no-audit --omit=dev --strict-peer-deps"
        },
        "install-prod-clean": {
          "const": "npm install-clean --ignore-scripts --no-audit --omit=dev --strict-peer-deps"
        },
        "lint": {
          "const": "eslint --fix --max-warnings=0 --no-error-on-unmatched-pattern **/*.{js,jsx,ts,tsx,vue}"
        },
        "lint-no-fix": {
          "const": "eslint --max-warnings=0 --no-error-on-unmatched-pattern **/*.{js,jsx,ts,tsx,vue}"
        },
        "lint-no-fix-profile": {
          "const": "set TIMING=1 && eslint --max-warnings=0 --no-error-on-unmatched-pattern **/*.{js,jsx,ts,tsx,vue}"
        },
        "major-release": {
          "enum": [
            "php bin/major-release.php",
            "php node_modules/real-config/bin/major-release.php"
          ]
        },
        "markdownlint": {
          "const": "markdownlint *.md --ignore=CHANGELOG.md"
        },
        "ncu": {
          "const": "ncu --dep=dev,peer,prod"
        },
        "ncu-upgrade": {
          "const": "ncu --dep=dev,peer,prod --upgrade"
        },
        "next-release": {
          "enum": [
            "php bin/next-release.php",
            "php node_modules/real-config/bin/next-release.php"
          ]
        },
        "package-json-lint": {
          "const": "npmPkgJsonLint ./package.json"
        },
        "php-cs-fixer": {
          "const": "php vendor/bin/php-cs-fixer fix --verbose"
        },
        "phpstan": {
          "const": "php vendor/bin/phpstan analyse -c phpstan.neon"
        },
        "phpstan-quiet": {
          "const": "php vendor/bin/phpstan analyse -c phpstan.neon --quiet"
        },
        "prepare": {
          "enum": [
            "node bin/prepare.js",
            "node node_modules/real-config/bin/prepare.js"
          ]
        },
        "regenerate-lock-file": {
          "const": "npm install --no-audit --package-lock-only --strict-peer-deps"
        },
        "sonar": {
          "const": "sonar-scanner"
        },
        "start": {
          "enum": [
            "next start",
            "quasar serve ./out",
            "react-scripts start",
            "ts-node src/index.ts",
            "tsc && ts-node --transpileOnly src/index.ts"
          ]
        },
        "stylelint": {
          "const": "stylelint --allow-empty-input --fix --max-warnings=0 src/**/*.{css,scss}"
        },
        "stylelint-html": {
          "const": "stylelint --allow-empty-input --config=.stylelintrc-html.js --fix --max-warnings=0 src/**/*.{html,php,vue}"
        },
        "stylelint-html-no-fix": {
          "const": "stylelint --allow-empty-input --config=.stylelintrc-html.js --max-warnings=0 src/**/*.{html,php,vue}"
        },
        "stylelint-no-fix": {
          "const": "stylelint --allow-empty-input --max-warnings=0 src/**/*.{css,scss}"
        },
        "test": {
          "enum": [
            "cf .coverage/lcov-report && jest",
            "cf .coverage/lcov-report && react-scripts test --coverage --watchAll=false"
          ]
        },
        "test-fast": {
          "enum": [
            "cf .coverage/lcov-report && jest --max-workers=4",
            "cf .coverage/lcov-report && react-scripts test --coverage --watchAll=false"
          ]
        },
        "test-release": {
          "enum": [
            "jest --coverage-directory=. --coverage-reporters=lcovonly",
            "react-scripts test --coverage --coverage-directory=. --coverage-reporters=lcovonly --watchAll=false"
          ]
        },
        "tsc": {
          "const": "tsc --noEmit"
        },
        "update": {
          "const": "npm update --no-audit --strict-peer-deps"
        },
        "upgrade": {
          "const": "npm run ncu-upgrade && npm run install-dev"
        },
        "vscode:prepublish": {
          "const": "cf out && tsc --project tsconfig-prepublish.json"
        },
        "vue-tsc": {
          "const": "vue-tsc --noEmit"
        },
        "watch": {
          "const": "tsc -watch"
        }
      }
    }
  }
}
